// A sliding window is an abstract concept commonly used in array/string problems. 
// A window is a range of elements in the array/string which usually defined by the start and end indices, i.e. [i, j)[i,j) (left-closed, right-open). 
// A sliding window is a window "slides" its two boundaries to the certain direction. 
// For example, if we slide [i, j)[i,j) to the right by 11 element, then it becomes [i+1, j+1)[i+1,j+1) (left-closed, right-open).
// Back to our problem. We use HashSet to store the characters in current window [i, j)[i,j) (j = i,j=i initially). 
// Then we slide the index jj to the right. If it is not in the HashSet, we slide jj further. 
// Doing so until s[j] is already in the HashSet. 
// At this point, we found the maximum size of substrings without duplicate characters start with index ii. 
// If we do this for all ii, we get our answer.

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> hash = new HashSet<Character>();
        int i=0;
        int j=0;
        int n = s.length();
        int re = 0;
        while (i<n && j<n) {
            if (!hash.contains(s.charAt(j))) {
                hash.add(s.charAt(j));
                j++;
                re = Math.max(re, j-i);
            } else {
                hash.remove(s.charAt(i));
                i++;
            }
        }
        return re;
    }
}